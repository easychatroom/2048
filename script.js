const boardSize=4;let board=[],selectedTile={row:null,col:null};function createBoard(){const e=document.querySelector(".game-board");e.innerHTML="";for(let a=0;a<boardSize;a++){board[a]=[];for(let r=0;r<boardSize;r++){board[a][r]=0;const t=document.createElement("div");t.classList.add("tile"),t.dataset.row=a,t.dataset.col=r,t.addEventListener("click",(()=>selectTile(a,r))),e.appendChild(t)}}spawnTile(),spawnTile(),renderBoard(),updateMaxTile()}function renderBoard(){for(let e=0;e<boardSize;e++)for(let a=0;a<boardSize;a++){const r=document.querySelector(`.tile[data-row="${e}"][data-col="${a}"]`),t=board[e][a];r.textContent=0===t?"":t,r.dataset.value=t,selectedTile.row===e&&selectedTile.col===a?r.classList.add("selected"):r.classList.remove("selected")}}function spawnTile(){const e=[];for(let a=0;a<boardSize;a++)for(let r=0;r<boardSize;r++)0===board[a][r]&&e.push({row:a,col:r});if(e.length>0){const a=e[Math.floor(Math.random()*e.length)];board[a.row][a.col]=Math.random()<.9?2:4}}function selectTile(e,a){selectedTile={row:e,col:a},renderBoard(),updateMaxTile()}function handleKeyPress(e){if(null===selectedTile.row||null===selectedTile.col)return;const{row:a,col:r}=selectedTile;let t=a,o=r;switch(e.key){case"ArrowUp":a>0&&t--;break;case"ArrowDown":a<boardSize-1&&t++;break;case"ArrowLeft":r>0&&o--;break;case"ArrowRight":r<boardSize-1&&o++;break;default:return}t===a&&o===r||(moveTile(a,r,t,o),selectedTile={row:t,col:o},spawnTile(),renderBoard(),updateMaxTile())}function moveTile(e,a,r,t){0===board[r][t]?(board[r][t]=board[e][a],board[e][a]=0):board[r][t]===board[e][a]&&(board[r][t]*=2,board[e][a]=0)}document.querySelector(".restart-btn").addEventListener("click",(()=>{selectedTile={row:null,col:null},createBoard()})),document.addEventListener("keydown",handleKeyPress);let currentUser=null,maxTileValue=0;function getMaxTile(e){return Math.max(...e.flat())}function updateMaxTile(){const e=getMaxTile(board);e>maxTileValue&&(maxTileValue=e,saveTileToFirebase(e))}function saveTileToFirebase(e){const a=sanitizeUsername(currentUser.username),r=db.ref(`2048Scores/${a}`);r.get().then((a=>{const t=a.val();(!t||e>(t.maxTile||0))&&r.set({username:currentUser.username,avatarBase64:currentUser.avatarBase64||"",maxTile:e,timestamp:Date.now()})}))}function sanitizeUsername(e){return e.replace(/[.#$\[\]]/g,"_")}function listenToLeaderboard(){const e=document.getElementById("leaderboardEntries");db.ref("2048Scores").on("value",(async a=>{const r=[],t=[];a.forEach((e=>{const a=e.val();a&&a.maxTile&&a.username&&(r.push(a),t.push(db.ref(`auth/${sanitizeUsername(a.username)}/avatarBase64`).get()))}));const o=await Promise.all(t);r.forEach(((e,a)=>{e.avatarBase64=o[a].val()||""})),r.sort(((e,a)=>a.maxTile-e.maxTile));const n=r.slice(0,50);e.innerHTML=n.map(((e,a)=>{let r="";0===a?r="ðŸ¥‡":1===a?r="ðŸ¥ˆ":2===a&&(r="ðŸ¥‰");return`\n        <div class="leaderboard-entry">\n          ${`<span style="margin-right:8px;">${a+1} ${r}</span>`}\n          <img src="data:image/png;base64,${e.avatarBase64}" />\n          <span>${e.username}</span> - <b>${e.maxTile}</b>\n        </div>\n      `})).join("")}))}(async()=>{currentUser=await authenticateFromURL(),currentUser&&(listenToLeaderboard(),createBoard(),window.addEventListener("beforeunload",(()=>{sessionStorage.removeItem("2048_user"),sessionStorage.removeItem("2048_avatar")})))})();